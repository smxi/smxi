#!/bin/bash
########################################################################
####  Script Name: usl
####  Description: updating tool for smxi scripts
####  version: 2.7.2
####  Date: 2023-10-18
########################################################################
####  Copyright (C) Harald Hope 2007-2023
####  This program is free software; you can redistribute it and/or modify it under
####  the terms of the GNU General Public License as published by the Free Software
####  Foundation; either version 3 of the License, or (at your option) any later version.
####
####  This program is distributed in the hope that it will be useful, but WITHOUT
####  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
####  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
####
####  Get the full text of the GPL here: http://www.gnu.org/licenses/gpl.txt
########################################################################
#### DEFINE:
#### TRUE: -eq 0; == 'true'; function return 0
#### FALSE: -gt 0; == ''; function return > 0
#### VC = Version Control - not specific like svn/gits
########################################################################
#### VARIABLES
########################################################################

# layout
LINE='- - - - - - - - - - - - - - - - - - - - - - - - - - - - -'

# paths, change these to suit your needs
ACXI_DEV="$HOME/bin/scripts/acxi/"
ACXI_REMOTE="git@codeberg.org:smxi/acxi"
ACXI_BRANCH='stable'
ACXI_VC="$HOME/bin/scripts/acxi/git/"

# only updating binxi stuff, not the xorg-c etc.
BINXI_DEV="$HOME/bin/scripts/inxi/svn/branches/inxi-legacy/"
BINXI_REMOTE="https://codeberg.org/smxi/inxi-legacy"
BINXI_BRANCH='master'
BINXI_VC="$HOME/bin/scripts/inxi/git-cb/binxi/"

INXI_DEV="$HOME/bin/scripts/inxi/svn/trunk/"
INXI_REMOTE='git@codeberg.org:smxi/inxi'
INXI_BRANCH='master'
INXI_VC="$HOME/bin/scripts/inxi/git-cb/inxi/"

INXI_DOCS_DEV="$HOME/bin/scripts/inxi/svn/docs/"
INXI_DOCS_REMOTE='git@codeberg.org:smxi/inxi-docs'
INXI_DOCS_BRANCH='master'
INXI_DOCS_VC="$HOME/bin/scripts/inxi/git-cb/docs/"

INXI_PERL_REMOTE='git@github.com:smxi/inxi'
INXI_PERL_BRANCH='inxi-perl'
INXI_PERL_VC="$HOME/bin/scripts/inxi/git-gh/inxi/"

PINXI_DEV="$HOME/bin/scripts/inxi/svn/branches/inxi-perl/"
PINXI_REMOTE='git@codeberg.org:smxi/pinxi'
PINXI_BRANCH='master'
PINXI_VC="$HOME/bin/scripts/inxi/git-cb/pinxi/"

KERNEL_DIR="$HOME/large/kernel-zips/"

PHP_DEV="$HOME/bin/scripts/my-php/"
PHP_REMOTE="git@codeberg.org:smxi/php-browser-detection"
PHP_BRANCH='master'
PHP_VC="$HOME/bin/scripts/my-php/git/"

RBXI_BZIP="$HOME/bin/scripts/rbxi/rbxi/"
RBXI_DEV="$HOME/bin/scripts/rbxi/dev/"
RBXI_HOME="$HOME/bin/scripts/rbxi/"
RBXI_REMOTE="git@codeberg.org:smxi/rbxi "
RBXI_BRANCH='master'
RBXI_VC="$HOME/bin/scripts/rbxi/git/"
RBXI_ZIPS="$HOME/bin/scripts/rbxi/zips/"

SGFXI_DEV="$HOME/bin/scripts/sgfxi/dev/"
SGFXI_REMOTE="git@codeberg.org:smxi/sgfxi"
SGFXI_BRANCH='master'
SGFXI_VC="$HOME/bin/scripts/sgfxi/git/"

SMXI_DEV='/usr/local/bin/'
SMXI_BACKEND_DEV="$HOME/bin/scripts/smxi/svn/trunk/backend-stuff/upgrade-data/"
SMXI_BACKEND_VC="$HOME/bin/scripts/smxi/git/backend-stuff/upgrade-data/"
SMXI_TOOLS_DEV="$HOME/bin/scripts/smxi/svn/trunk/dev-tools/"
SMXI_TOOLS_VC="$HOME/bin/scripts/smxi/git/dev-tools/"
SMXI_KERNEL_DEV="$HOME/bin/scripts/smxi/svn/trunk/kernel-stuff/"
SMXI_KERNEL_VC="$HOME/bin/scripts/smxi/git/kernel-stuff/"
SMXI_REMOTE="git@codeberg.org:smxi/smxi"
SMXI_BRANCH='master'
SMXI_STUB_DEV="$HOME/bin/scripts/smxi/svn/trunk/smxi-stub/"
SMXI_STUB_VC="$HOME/bin/scripts/smxi/git/smxi-stub/"
SMXI_VC="$HOME/bin/scripts/smxi/git/"

SVMI_DEV="$HOME/bin/scripts/svmi/dev/"
SVMI_REMOTE="git@codeberg.org:smxi/svmi"
SVMI_BRANCH='master'
SVMI_VC="$HOME/bin/scripts/svmi/git/"

# then set the default data, no usl startup args given
WORKING_VC_DIR=$SMXI_VC
WORKING_REMOTE=$SMXI_REMOTE
WORKING_BRANCH=$SMXI_BRANCH

# scripts/libs
RB_VERSION="${RBXI_VC}rb-version"
LIST_ACXI='acxi acxi.1 acxi.changelog acxi.conf auto.tag LICENSE.txt README.txt
docs/acxi-values.txt'
LIST_BINXI='binxi binxi.1 README.txt'
LIST_INXI='inxi'
LIST_INXI_FULL='inxi inxi.1 inxi.changelog README.txt'
LIST_PHP='browser_detection.inc language_detection.inc'
# not actually used, see process_rbxi() for files/actions
LIST_RBXI='rbxi rb README.txt'
LIST_SGFXI="sgfxi README.txt"
LIST_SVMI='svmi README.txt'
LIST_SMXI="smxi sm-lib-apt-tools sm-lib-clean-up sm-lib-distro-conversion 
sm-lib-du-fixes sm-lib-graphics sm-lib-kde4-updater sm-lib-kernel 
sm-lib-kernel-install sm-lib-misc-tweaks sm-lib-package-install 
sm-lib-package-removal sm-lib-warning sm-lib-2006-fixes sm-lib-2007-fixes 
sm-lib-2008-fixes sm-lib-2008-fixes-s sm-lib-2008-fixes-t sm-lib-2009-fixes 
sm-lib-2009-fixes-s sm-lib-2009-fixes-t sm-lib-2011-fixes sm-lib-2011-fixes-s 
sm-lib-2011-fixes-t"
LIST_SMXI_BACKEND="alert_message configs_last_modified configs_t  
holds_last_modified_t last_modified_s status
warning_message_s alert_message_s configs_last_modified_s  holds
holds_s last_modified_t status_s warning_message_t alert_message_t 
configs_last_modified_t holds_last_modified holds_t sm-lib-kernels 
status_t configs configs_s holds_last_modified_s last_modified sm-lib-kernels-bu 
warning_message"
LIST_SMXI_KERNEL="dsl install-kernel.sh"
LIST_SMXI_STUB="smxi-stub"
LIST_SMXI_TOOLS="sm-extra-functions usl zsl"

INXI_VERSION=''
SM_VERSIONS="${SMXI_VC}sm-versions"
SM_VERSIONS_PREVIOUS="${SMXI_VC}sm-versions-previous"
# this has to the current live version on smxi.org
SM_VERSIONS_URL='https://smxi.org/sm/sm-versions'

# the primary version number will be manually set.
SM_MAIN_FIRST='8'

B_INXI='false'
B_MAKE_VERSIONS_FILE='true'
B_SKIP_VC='false'
B_SKIP_ZIP='false'
B_SM='true'
B_TAG='false'
UPDATE_TYPE='s' # set for default, smxi, or g/i/v
VC_TYPE='git'

########################################################################
#### FUNCTIONS
########################################################################
# args: $1 error nu; $2 - extra data
function error_handler(){
	local message=''
	case $1 in
		1)
			message='You should not be root to run this script'
			;;
		2)
			message="The directory: $2 does not exist."
			;;
		3)
			message="sed failed for some reason while removing dev flags in file: $2"
			;;
		4)
			message="wget failed to get the file: $2"
			;;
		5)
			message="You used an option that does not exist: $2"
			;;
		6)
			message="git checkout of $WORKING_REMOTE $WORKING_BRANCH\nfailed with error: $2"
			;;
		7)
			message="git commit of $WORKING_VC_DIR $WORKING_BRANCH\nfailed with error: $2"
			;;
		6)
			message="git push to $WORKING_REMOTE $WORKING_BRANCH\nfailed with error: $2"
			;;
	esac
	echo $LINE
	echo -e $message
	echo "Error $1 - Exiting script, please correct the error"
	echo $LINE
	exit $1
}

# args: $1 - "$@"
function get_options(){
	local opt=''
	while getopts :abghiprstuvz opt
	do
		case $opt in
			a)
				WORKING_VC_DIR=$ACXI_VC
				UPDATE_TYPE='a'
				B_SM='false'
				B_SKIP_ZIP='true'
				B_MAKE_VERSIONS_FILE='false'
				VC_TYPE='git'
				WORKING_BRANCH=$ACXI_BRANCH
				WORKING_REMOTE=$ACXI_REMOTE
				;;
			b)
				WORKING_VC_DIR=$BINXI_VC
				UPDATE_TYPE='b'
				B_SM='false'
				B_SKIP_ZIP='true'
				VC_TYPE='git'
				WORKING_BRANCH=$BINXI_BRANCH
				WORKING_REMOTE=$BINXI_REMOTE
				;;
			g)
				WORKING_VC_DIR=$SGFXI_VC
				UPDATE_TYPE='g'
				B_SKIP_ZIP='true'
				VC_TYPE='git'
				WORKING_BRANCH=$SGFXI_BRANCH
				WORKING_REMOTE=$SGFXI_REMOTE
				;;
			i)
				B_INXI='true'
				WORKING_VC_DIR=$INXI_VC
				UPDATE_TYPE='i'
				B_SKIP_ZIP='true'
				VC_TYPE='git'
				WORKING_BRANCH=$INXI_BRANCH
				WORKING_REMOTE=$INXI_REMOTE
				;;
			p)
				WORKING_VC_DIR=$PHP_VC
				UPDATE_TYPE='p'
				B_SM='false'
				B_SKIP_ZIP='true'
				VC_TYPE='git'
				WORKING_BRANCH=$PHP_BRANCH
				WORKING_REMOTE=$PHP_REMOTE
				;;
			r)
				WORKING_VC_DIR=$RBXI_VC
				UPDATE_TYPE='r'
				B_SM='false'
				B_SKIP_ZIP='true'
				B_MAKE_VERSIONS_FILE='false'
				VC_TYPE='git'
				WORKING_BRANCH=$RBXI_BRANCH
				WORKING_REMOTE=$RBXI_REMOTE
				;;
			t)
				B_TAG='true'
				;;
			u)
				B_SKIP_VC='true'
				;;
			v)
				WORKING_VC_DIR=$SVMI_VC
				UPDATE_TYPE='v'
				B_SKIP_ZIP='true'
				VC_TYPE='git'
				WORKING_BRANCH=$SVMI_BRANCH
				WORKING_REMOTE=$SVMI_REMOTE
				;;
			''|s)
				UPDATE_TYPE='s'
				VC_TYPE='git'
				WORKING_BRANCH=$SMXI_BRANCH
				WORKING_REMOTE=$SMXI_REMOTE
				;;
			z)
				B_SKIP_ZIP='true'
				;;
			h)
				echo "Useage:
-a Update and commit acxi
-b Update and commit binxi
-g Update and commit sgfxi
-i Update and commit inxi
-p Update and commit php libraries
-r Update and commit rbxi
-u Update only, skip svn/git commit
-s (or null, no args) Update and commit smxi.
   Will get inxi, sgfxi, and svmi version numbers as well,
   and add those files to the main smxi svn directory for easy
   uploading and handling.
-t Auto tag commit. Only use this with inxi, 
   and only when commiting to master.
-v Update and commit svmi
-z Skip the zip up part
"
				exit 0
				;;
			*)
				error_handler 5 "-$OPTARG"
				;;
		esac
	done
}

function start_up_tests(){
	local startDir=''
	echo $LINE
	echo "Running initial startup tests..."
	# don't want to use root for this script
	if [ "$(whoami)" == 'root' ];then
		error_handler 1
	fi
# 	if [[ $UPDATE_TYPE == 'i' ]];then
# 		KERNEL_DIR=''
# 	fi
	# make sure the paths you made are right and exist $INXI_VC 
	for startDir in $ACXI_DEV $ACXI_VC $SMXI_TOOLS_DEV $KERNEL_DIR $SMXI_KERNEL_DEV $PHP_DEV $RBXI_BZIP $RBXI_DEV $RBXI_VC $SMXI_DEV $SGFXI_DEV $SGFXI_VC $SMXI_VC $SMXI_STUB_DEV $SVMI_DEV $SVMI_VC
	do
		if [ ! -d "$startDir" ];then
			error_handler 2 $startDir
		fi
	done
	echo "Start up tests: passed"
}

function make_versions_file(){
	if [ "$UPDATE_TYPE" == 'r' ];then
		# create or wipe the master working file
		echo -n '' > $RB_VERSION
	else
		# create or wipe the master working file
		echo -n '' > $SM_VERSIONS
		# this ensures that we're working with the true last version, not an off version
		# this is important to have in order to always be using the latest live versions file
		wget -O $SM_VERSIONS_PREVIOUS $SM_VERSIONS_URL || error_handler 4 $SM_VERSIONS_PREVIOUS
		if [ "$?" -gt 0 ];then
			error_handler 4 $SM_VERSIONS_URL
		fi
	fi
}

# make sure to turn to false all dev flags
function clean_dev_flags(){
	local script='' scripts='smxi sgfxi svmi'
	local isRestart=''
	local isDev=''
	echo "Cleaning dev flags up now..."
	cd $SMXI_VC
	for script in $scripts
	do
		isRestart=$( grep -i "^SKIP_RESTART='true'" $script )
		isDev=$( grep -i "^DEV_FLAG='true'" $script )
		# just a small fix to make the files not update unless they need to
		if [ -n "$isRestart" -o -n "$isDev" ];then
			# important! only reset where line begins with variable name
			sed -i -e "s/^SKIP_RESTART=.*/SKIP_RESTART=''/" -e "s/^DEV_FLAG=.*/DEV_FLAG=''/" $SMXI_VC$script || error_handler 3 $script
		fi
	done
}

# this is for those times I forget to clean the -T flag data
function clean_gfx_test_data(){
	local vcGfx="${SMXI_VC}sgfxi"
	local setTestDataStart=$( grep -n '^set_test_data()' $vcGfx | cut -d ':' -f 1 )
	# start 5 lines below
	setTestDataStart=$(( $setTestDataStart + 6 ))
	echo "Cleaning gfx test data, start line: $setTestDataStart..."
	# add # before any line in the function starting with space
	# remember to search for ' fi', otherwise something like 'specific' triggers it
	sed -i ''${setTestDataStart}',/[[:space:]]fi/ s/^[[:space:]].*/#&/' $vcGfx
}

# trigger update_sm_data
function main_updater(){
	echo $LINE
	git_checkout
	if [ "$B_SM" == 'true' ];then
		update_sm_data "$LIST_SMXI" "$SMXI_DEV"
		update_sm_data "$LIST_SGFXI" "$SGFXI_DEV"
		update_sm_data "$LIST_SVMI" "$SVMI_DEV"
		update_sm_data "$LIST_INXI" "$INXI_VC"
		update_sm_data "$LIST_RBXI" "$RBXI_VC"
		process_script "$LIST_SMXI_BACKEND" "$SMXI_BACKEND_DEV" "$SMXI_BACKEND_VC"
		process_script "$LIST_SMXI_KERNEL" "$SMXI_KERNEL_DEV" "$SMXI_KERNEL_VC"
		process_script "$LIST_SMXI_STUB" "$SMXI_STUB_DEV" "$SMXI_STUB_VC"
		process_script "$LIST_SMXI_TOOLS" "$SMXI_TOOLS_DEV" "$SMXI_TOOLS_VC"
		update_kernel_installers
		update_other_components
		clean_dev_flags
		clean_gfx_test_data
		finalize_sm_versions
	else
		if [ "$UPDATE_TYPE" == 'a' ];then
			process_script "$LIST_ACXI" "$ACXI_DEV" "$WORKING_VC_DIR"
		elif [ "$UPDATE_TYPE" == 'b' ];then
			process_script "$LIST_BINXI" "$BINXI_DEV" "$WORKING_VC_DIR"
		elif [ "$UPDATE_TYPE" == 'i' ];then
			process_script "$LIST_INXI_FULL" "$INXI_DEV" "$INXI_VC"
		elif [ "$UPDATE_TYPE" == 'p' ];then
			process_script "$LIST_PHP" "$PHP_DEV" "$WORKING_VC_DIR"
		elif [ "$UPDATE_TYPE" == 'r' ];then
			process_rbxi
		fi
	fi
}

# args: $1 - which data set to update; $2 - data dir; $3 vc directory
function process_script(){
	local script='' localVersion='' localDate=''
	echo "Updating $2 group now"
	for script in $1
	do
		cp -afL --preserve=timestamps $2$script $3$script
	done
}

# args: $1 - which data set to update; $2 - data dir
function update_sm_data(){
	local script='' localVersion='' localDate=''
	echo "Updating $2 group now"
	for script in $1
	do
		# Perl version/date different
		if [ "$script" == 'inxi' ];then
			localVersion=$( grep -im 1 -E '^my \$self_version=.*' $2$script | grep -o -G "[0-9].[0-9]*.[0-9]*" )
			localDate=$( grep -im 1 -E '^my \$self_date=.*' $2$script | grep -o -E "[0-9]{4}-[0-9]{2}-[0-9]{2}" )
			#echo "$localVersion $localDate"
			final=$(date +%H-%M-%S)
			#final=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
			# INXI_VERSION="$localVersion-$localDate-$final"
			INXI_VERSION="$localVersion"
		else
			localVersion=$( grep -im 1 -o -E "version(:[\ ]*|=)[0-9].[0-9]*.[0-9]*" $2$script | grep -o -G "[0-9].[0-9]*.[0-9]*" )
			# weird: [A-Za-z0-9,\ -] works but [A-Za-z0-9,-\ ] only returns the first number in 2013-10-14
			localDate=$( grep -im 1 -o -E "Date(:[\ ]*|=)[0-9-]*" $2$script | grep -o -E "[0-9]{4}-[0-9]{2}-[0-9]{2}" )
		fi
		echo 'result: '$script'='$localVersion':'$localDate
		if [[ $script != 'README.txt' && $script != 'rb' ]];then
			echo $script'='$localVersion':'$localDate >> $SM_VERSIONS
		fi
		echo "copy $script to ${SMXI_VC}$script"
		echo "$script=$localVersion:$localDate"
		cp -af --preserve=timestamps $2$script $SMXI_VC$script
		# working sgfxi/svmi will often have testing data, don't want to comment out
		# that each update
		case $2 in
			$SGFXI_DEV)
				cp -af --preserve=timestamps $2$script $SGFXI_VC$script
				;;
			$SVMI_DEV)
				cp -af --preserve=timestamps $2$script $SVMI_VC$script
				;;
		esac
	done
}

# the basic idea here is simple: for every increment in any script component
# 1st, 2nd, 3rd, increment the overall smxi equivalent number by 1
# for manual primary 1st update, just set 2/3 to 0 and set new date
function construct_smxi_version_number(){
	local script='' incrementFirst='' incrementSecond='' incrementThird=''
	local smMainVersion=$( grep 'sm-main-version=' $SM_VERSIONS_PREVIOUS | cut -d '=' -f 2 | cut -d ':' -f 1 )
	local smMainDate=$( grep 'sm-main-version=' $SM_VERSIONS_PREVIOUS | cut -d '=' -f 2 | cut -d ':' -f 2 )
	local smMainFirst=$( cut -d '.' -f 1 <<< $smMainVersion )
	local smMainSecond=$( cut -d '.' -f 2 <<< $smMainVersion )
	local smMainThird=$( cut -d '.' -f 3 <<< $smMainVersion )
	local smOld='' smNew=''
	local smOldOne='' smNewOne='' smOldTwo='' smNewTwo='' smOldThird='' smNewThird=''
	for script in $LIST_SMXI
	do
		# get the two values, old and new
		smOld=$( grep "$script=" $SM_VERSIONS_PREVIOUS |cut -d '=' -f 2 | cut -d ':' -f 1 )
		if [ -n "$smOld" ];then
			smOldOne=$( cut -d '.' -f 1 <<< $smOld )
			smOldTwo=$( cut -d '.' -f 2 <<< $smOld )
			smOldThird=$( cut -d '.' -f 3 <<< $smOld )
		# handles case of new smxi files
		else
			smOldOne=0
			smOldTwo=0
			smOldThird=0
		fi
		smNew=$( grep "$script=" $SM_VERSIONS |cut -d '=' -f 2 | cut -d ':' -f 1 )
		smNewOne=$( cut -d '.' -f 1 <<< $smNew )
		smNewTwo=$( cut -d '.' -f 2 <<< $smNew )
		smNewThird=$( cut -d '.' -f 3 <<< $smNew )
		# second number increments occur with change in primary first or second number
		if [ "$smNewOne" -gt "$smOldOne" -o "$smNewTwo" -gt "$smOldTwo" ];then
			incrementSecond='true'
		fi
		# and third number increments occur only with third number differences
		if [ "$smNewThird" -gt "$smOldThird" ];then
			incrementThird='true'
		fi
	done
	if [ "$1" == 'debugger' ];then
		echo "first: $SM_MAIN_FIRST main: $smMainFirst"
		echo "second: main: $smMainSecond"
		echo "third: main: $smMainThird"
	fi
	# first strip off leading zeros to avoid printf error, and make sure to add back in 0
	# if it was a 0 to start with
	# http://www.askdavetaylor.com/how_do_i_strip_leading_zeroes_for_math_in_a_shell_script.html
	smMainSecond=$( sed 's/^0*//' <<< $smMainSecond | awk '{print $1 + 0}' )
	smMainThird=$( sed 's/^0*//' <<< $smMainThird | awk '{print $1 + 0}' )
	# if manual primary version update, just reset 2/3 to 0
	if [ "$SM_MAIN_FIRST" -gt "$smMainFirst" ];then
		smMainFirst=$SM_MAIN_FIRST
		smMainSecond=0
		smMainThird=0
		incrementFirst='true'
	# then update 2nd/3rd if needed
	elif [ "$incrementSecond" == 'true' ];then
		smMainSecond=$(( $smMainSecond + 1 ))
		smMainThird=0
	elif [ "$incrementThird" == 'true' ];then
		smMainThird=$(( $smMainThird + 1 ))
	fi
	# then, if changed, update main date as well
	if [ "$incrementFirst" == 'true' -o "$incrementSecond" == 'true' -o "$incrementThird" == 'true' ];then
		smMainDate=$(date "+%Y-%m-%d")
	fi
	# process the numbers to make them nice and neat again for output
	smMainSecond=$( printf %02d $smMainSecond )
	smMainThird=$( printf %02d $smMainThird )
	# then print it out to function
	echo "$smMainFirst.$smMainSecond.$smMainThird:$smMainDate"
}

function process_rbxi(){
	cd $RBXI_HOME
	local localVersion='' localDate=''
	echo "Copying rbxi files to bzip and VC"
	cp -af --preserve=timestamps ${RBXI_DEV}rbxi $RBXI_VC
	cp -af --preserve=timestamps ${RBXI_DEV}README.txt $RBXI_VC
	cp -arvf --preserve=timestamps ${RBXI_DEV}rbxi-data-static/* ${RBXI_VC}rbxi-data
	cp -af --preserve=timestamps ${RBXI_DEV}rbxi $RBXI_BZIP
	cp -arvf --preserve=timestamps ${RBXI_DEV}rbxi-data-static/* ${RBXI_BZIP}rbxi-data
	local localVersion=$( grep -im 1 -o -G "Version:\ [0-9].[0-9]*.[0-9]*" rbxi/rbxi  | grep -o -G "[0-9].[0-9]*.[0-9]*" )
	local localDate=$( grep -im 1 -o -G "Date:\ [A-Za-z0-9-]*" rbxi/rbxi | cut -f 2-4 -d ' ' )
	echo "rbxi=$localVersion:$localDate" > $RB_VERSION
	# all files are copied to rbxi/rbxi so tar it
	echo "rbxi data is: $localVersion:$localDate"
	echo "Tar/bzipping now..."
	cd rbxi
	tar vcjf rbxi.tar.bz2 rbxi*
	echo "Moving to: $RBXI_ZIPS"
	mv rbxi.tar.bz2 $RBXI_ZIPS
	echo "Creating backup bzip file now and copying bz2 to VC..."
	cp -f ${RBXI_ZIPS}rbxi.tar.bz2 ${RBXI_ZIPS}rbxi-$localVersion.tar.bz2
	cp -f ${RBXI_ZIPS}rbxi.tar.bz2 ${RBXI_VC}rbxi.tar.bz2
	echo "Done with rbxi specific tasks now."
	echo "Remember to upload rbxi/dev/rb-version and rbxi to the remote rb directory"
	echo "on server!!! And the bz2 file."
}
#construct_smxi_version_number;exit

function update_inxi_branches(){
	# unused branches: one two binxi
	local branches='pinxi inxi-perl docs' 
	local add_perl='' dev_dir='' files='' working_vc=''
	local b_pinxi='false' 
	echo $LINE
	echo "Starting pinxi/inxi related updates..."
	for branch in $branches;do
		b_pinxi='false'
		b_c='false'
		add_perl=''
		dev_dir=''
		files=''
		WORKING_REMOTE=$INXI_REMOTE
		WORKING_VC_DIR=$INXI_VC
		WORKING_BRANCH=$branch
		case $branch in
			binxi)
				dev_dir=$BINXI_DEV
				files='binxi.1 binxi README.txt'
				WORKING_REMOTE=$BINXI_REMOTE
				WORKING_VC_DIR=$BINXI_VC
				WORKING_BRANCH=$BINXI_BRANCH
				;;
			docs)
				## remember, you have to manually git add a new page, after running 
				# #this once to put a copy in the git branch docs.
				# 1. create link between smxi/docs file and svn/docs
				# 2. run usl -i to create file 
				## then:
				# 3. git checkout docs
				# 4. git add inxi-json-xml-output.htm
				## I think usl -i does this part but might as well
				# 5. git commit -a
				# 6. git push git@codeberg.org:smxi/inxi_docs
				WORKING_REMOTE=$INXI_DOCS_REMOTE
				WORKING_VC_DIR=$INXI_DOCS_VC
				WORKING_BRANCH=$INXI_DOCS_BRANCH
				dev_dir=$INXI_DOCS_DEV
				files='smxi-docs.css 
				inxi.htm 
				inxi-about.htm 
				inxi-changelog.htm 
				inxi-configuration.htm 
				inxi-core-mission.htm 
				inxi-cpu-flags.htm 
				inxi-dependencies.htm 
				inxi-faqs.htm 
				inxi-installation.htm 
				inxi-irc-tech.htm
				inxi-json-xml-output.htm
				inxi-man.htm 
				inxi-man-2.x.htm 
				inxi-options.htm 
				inxi-options-2.x.htm 
				inxi-programming-conventions.htm 
				inxi-screenshots.htm 
				inxi-tech.htm
				inxi-usage.htm 
				'
				;;
			inxi-perl)
				dev_dir=$PINXI_DEV
				files='pinxi.1 pinxi'
				WORKING_REMOTE=$INXI_PERL_REMOTE
				WORKING_BRANCH=$INXI_PERL_BRANCH
				WORKING_VC_DIR=$INXI_PERL_VC
				;;
			inxi-c)
				dev_dir="$HOME/bin/scripts/inxi/svn/branches/inxi-c/"
				files='README.txt'
				b_c='true'
				add_perl='GetSystemData/*'
				;;
			one)
				dev_dir="$HOME/bin/scripts/inxi/svn/branches/one/"
				files='inxi README.txt'
				;;
			pinxi)
				dev_dir=$PINXI_DEV
				files='pinxi.1 pinxi pinxi.changelog README.txt'
				b_pinxi='true'
				add_perl='modules/* data/*/* docs/* lib/* tools/*'
				WORKING_REMOTE=$PINXI_REMOTE
				WORKING_VC_DIR=$PINXI_VC
				WORKING_BRANCH=$PINXI_BRANCH
				;;
			two)
				dev_dir="$HOME/bin/scripts/inxi/svn/branches/two/"
				files='inxi README.txt'
				;;
			
		esac
		echo $LINE
		git_checkout
		if [ "$files" != '' ];then
			process_script "$files" "$dev_dir" "$WORKING_VC_DIR"
		fi
		if [ "$b_pinxi" == 'true' ];then
			cp -af ${dev_dir}data/* ${WORKING_VC_DIR}data
			cp -af ${dev_dir}docs/* ${WORKING_VC_DIR}docs
			cp -af ${dev_dir}lib/* ${WORKING_VC_DIR}lib
			cp -af ${dev_dir}modules/* ${WORKING_VC_DIR}modules
			cp -af ${dev_dir}tools/* ${WORKING_VC_DIR}tools
			git_add "$add_perl" 
		elif [ "$b_c" == 'true' ];then
			cp -af ${dev_dir}GetSystemData/* ${INXI_VC}GetSystemData
			git_add "$add_perl" 
		fi
		git_commit
	done
	WORKING_BRANCH='master'
	echo $LINE
	git_checkout
	echo "Completed pinxi/inxi related updates."
}

# add closing steps for sm_versions file
function finalize_sm_versions(){
	local smxiVersion=$( construct_smxi_version_number )
	# construct_smxi_version_number
	echo "smxi version number is:"
	construct_smxi_version_number 'debugger'
	echo "Finalizing $SM_VERSIONS now..."
	echo "sm-main-version=$smxiVersion" >> $SM_VERSIONS
	echo >> $SM_VERSIONS
	echo '###**EOF**###' >> $SM_VERSIONS
	# add the versions file to the svn too
	# cp -f --preserve=timestamps $SM_VERSIONS $SMXI_VC
}

# extra scripts used in smxi, kernel installers for zipped kernels
function update_kernel_installers(){
	local kernelInstaller='install-kernel.sh'

	# update kernel installers if needed
	# note needed anymore, it's a sym link now
	# cp -f ${KERNEL_DIR}kernel-installer/$kernelInstaller $SMXI_KERNEL_DEV$kernelInstaller
}

# developer scripts for creating smxi
function update_other_components(){
	#cp -f ${DEV_TOOLS_DIR}dsl ${SMXI_KERNEL_DEV}dsl
	# cp -f ${DEV_TOOLS_DIR}smxi-stub ${SMXI_STUB_DEV}smxi-stub
	#cp -f ${DEV_TOOLS_DIR}usl ${SMXI_TOOLS_DEV}usl
	#cp -f ${DEV_TOOLS_DIR}zsl ${SMXI_TOOLS_DEV}zsl
	:
}

# if you have write access to svn, this last step will update svn
function svn_update(){
	local response='' response2=''

	echo $LINE
	echo "Please enter the svn commit message:"
	read response

	echo "You entered this:"
	echo $LINE
	echo "$response"
	echo $LINE
	echo "Is this correct (y/n)"
	read response2

	case $response2 in
		y|Y)
			echo "Ok, committing it now"
			svn_commit "$response"
			;;
		*)
			echo "Ok, let's try it again..."
			svn_update
			;;
	esac
}

# args: $1 - message for commit
function svn_commit(){
	svn commit $WORKING_VC_DIR$svnWild
}

function git_checkout(){
	echo "Checking out branch $WORKING_BRANCH in $WORKING_VC_DIR"
	cd $WORKING_VC_DIR
	git checkout $WORKING_BRANCH || error_handler 6 "$?"
}

function git_add(){
	echo "Adding files (if new) to branch $WORKING_BRANCH in $WORKING_VC_DIR"
	cd $WORKING_VC_DIR
	git add $1
}

# args: $1 - message for commit
function git_commit(){
	echo "Committing $WORKING_BRANCH branch in $WORKING_VC_DIR"
	cd $WORKING_VC_DIR
	git $tag_opt commit -a # || error_handler 7 "$?"
	git push $WORKING_REMOTE $WORKING_BRANCH || error_handler 8 "$?"
	if [ "$B_TAG" == 'true' -a "$WORKING_VC_DIR" == "$INXI_VC" -a "$WORKING_BRANCH" == 'master' ];then
		git_tag
	fi
}

function git_tag(){
	echo "Tagging $WORKING_BRANCH branch in $WORKING_VC_DIR"
	local tags=$(git tag) working='' version='1'
	tags=$(sort -r <<< $tags)
	for tag in $tags;do
		if [ -n "$(grep "^$INXI_VERSION-" <<< $tag)" ];then
			version=$(cut -d '-' -f 2 <<< $tag)
			version=$(($version + 1))
			break;
		fi
	done
	INXI_VERSION="$INXI_VERSION-$version"
	echo "tag:$INXI_VERSION"
	cd $WORKING_VC_DIR
	git tag $INXI_VERSION $WORKING_BRANCH
	git pull --tags
	git push --tags $WORKING_REMOTE $WORKING_BRANCH
}

function zip_it_up(){
	cd $HOME
	su -c "${SMXI_TOOLS_DEV}zsl"
}

function finish_it_up(){
	echo $LINE
	echo "OK, all finished. Remember to upload via ftp the changes to make it live."
}

########################################################################
#### EXECUTE
########################################################################
get_options "$@"
start_up_tests
if [ "$B_MAKE_VERSIONS_FILE" == 'true' ];then
	make_versions_file
fi
main_updater
# comment this out if you do not have svn write access
if [ "$B_SKIP_VC" == 'false' ];then
	if [ "$VC_TYPE" == 'svn' ];then
		svn_commit
		#svn_update
	elif [ "$VC_TYPE" == 'git' ];then
		git_commit
	fi
fi
if [ "$B_SKIP_ZIP" == 'false' ];then
	zip_it_up
fi
if [ "$B_INXI" == 'true' ];then
	#git_tag
	update_inxi_branches
fi
finish_it_up
exit 0
